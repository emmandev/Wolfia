import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    apply from: 'gradle/versions.gradle'
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitVersion}"
        classpath "org.ajoberstar.grgit:grgit-gradle:${grGitVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${aptVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarQubeVersion}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayVersion}"
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayVersion}"
        classpath "nu.studer:gradle-jooq-plugin:${jooqPluginVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versionsPluginVersion"
    }
}

ext {
    buildNumber = (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV')
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    group = 'space.npstr.wolfia'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()                               // JDA, maybe others
        mavenCentral()                          // everything else
        maven { url 'https://dl.bintray.com/napster/SqlSauce' }
        mavenLocal()                            // local maven repo, mostly for testing stuff
        maven { url 'https://jitpack.io' }      //for getting builds from github
    }

    //set up autogenerated files in idea
    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
    idea {
        module {
            sourceDirs += sourceSets.main.output.generatedSourcesDirs
            generatedSourceDirs += sourceSets.main.output.generatedSourcesDirs
            testSourceDirs += sourceSets.test.output.generatedSourcesDirs
            generatedSourceDirs += sourceSets.test.output.generatedSourcesDirs
        }
    }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'm1', 'm2', 'm3'].any {
                    q -> selection.candidate.version.toLowerCase().contains(q)
                }
                if (rejected) {
                    selection.reject('Alpha or beta version')
                }
            }
        }
    }
}

project('database-codegen') {
    apply plugin: 'org.flywaydb.flyway'
    apply plugin: 'nu.studer.jooq'

    configurations {
        flywayMigration
    }

    ext {
        codegenJdbcUrl = System.getenv('WOLFIA_CODEGEN_JDBC') == null
                ? "jdbc:postgresql://localhost:5434/codegen?user=codegen"
                : System.getenv('WOLFIA_CODEGEN_JDBC')
    }

    dependencies {
        implementation "org.jooq:jooq:$jooqVersion"                               // object oriented sql queries
        implementation "org.jooq:jooq-meta:$jooqVersion"                          // object oriented sql queries
        implementation "org.jooq:jooq-codegen:$jooqVersion"                       // object oriented sql queries
        // java cruft, can be removed with jooq 3.12+
        implementation "javax.annotation:javax.annotation-api:$javaxAnnotationsVersion"
        flywayMigration "org.postgresql:postgresql:$postgresqlVersion"            // access db during codegen
        jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"                // access db during codegen
    }

    flyway {
        flywayMigrate.dependsOn(flywayClean)
        url = "$codegenJdbcUrl"
        locations = ['filesystem:database-codegen/src/main/resources/db/migrations']
        configurations = ['flywayMigration']
    }

    jooq {
        version = jooqVersion
        edition = 'OSS'
        wolfia(sourceSets.main) {
            jdbc {
                driver = 'org.postgresql.Driver'
                url = "$codegenJdbcUrl"
            }
            generator {
                name = 'org.jooq.codegen.DefaultGenerator'
                strategy {
                    name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
                database {
                    name = 'org.jooq.meta.postgres.PostgresDatabase'
                    inputSchema = 'public'
                }
                target {
                    packageName = 'space.npstr.wolfia.db.gen'
                    directory = 'build/classes/generated/java'
                }
            }
        }
    }

    generateWolfiaJooqSchemaSource {
        dependsOn(flywayMigrate)
    }

    test {
        dependsOn(flywayMigrate)
    }
}

project(':common') {
    dependencies {
        api "org.slf4j:slf4j-api:$slf4jVersion"
    }
}

project('discord-wrapper') {

    dependencies {
        compile project(':common')

        annotationProcessor "org.immutables:value:$immutablesVersion"
        compileOnly "org.immutables:value:$immutablesVersion:annotations"
        api "net.dv8tion:JDA:$jdaVersion"                                                   //TODO make implementation
        implementation "org.springframework.boot:spring-boot-starter:$springBootVersion"
    }

}

apply plugin: 'application'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'

version = "${versionTag()}".toString()


mainClassName = 'space.npstr.wolfia.Launcher'

configurations {
    // fucks with spring boot jar, we dont need it anyways
    // be VERY careful and test the produced jar if ever reenabled
    compile.exclude module: 'opus-java'
}

dependencies {
    implementation project(':database-codegen')
    implementation project(':discord-wrapper')

    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "io.sentry:sentry-logback:$sentryVersion"

    implementation "org.yaml:snakeyaml:$yamlVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation "org.json:json:$jsonOrgVersion"
    implementation "space.npstr:annotations:$annotationsVersion"

    implementation "io.prometheus:simpleclient:$prometheusVersion"
    implementation "io.prometheus:simpleclient_hotspot:$prometheusVersion"
    implementation "io.prometheus:simpleclient_logback:$prometheusVersion"
    implementation "io.prometheus:simpleclient_common:$prometheusVersion"
    implementation "io.prometheus:simpleclient_caffeine:$prometheusVersion"
    implementation "space.npstr:prometheus_extensions:$promExtensionsVersion"

    implementation "space.npstr.SqlSauce:sqlsauce-core:$sqlsauceVersion"
    implementation "space.npstr.SqlSauce:discord-entities:$sqlsauceVersion"
    implementation "net.ttddyy:datasource-proxy:$dsProxyVersion"
    implementation "org.flywaydb:flyway-core:$flywayVersion"

    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
}

compileJava.dependsOn 'clean'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Xmaxerrs' << '10000' << '-Xdiags:verbose'
}

//required by spring boot configuration processor
compileJava.dependsOn(processResources)

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        //noinspection GroovyAssignabilityCheck
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveFileName = "wolfia.jar"
    doLast {
        copy {
            from 'build/libs/wolfia.jar'
            into '.'
        }
    }
}

processResources {
    //inject values into app.properties
    filesMatching('**/app.properties') {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.name,
                "env.BUILD_NUMBER"  : project.ext.buildNumber,
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    filesSpec {
        from 'build/libs'
        into '.'
        rename '(.+)\\.(.+)', '$1-' + project.version + '.$2'
    }
    dryRun = false
    publish = true
    pkg {
        repo = 'wolfia'
        name = 'beta'
        userOrg = user
        version {
            name = project.version
        }
    }
}

//returns the last git tag (that needs to be in the form of MAJOR.MINOR.PATCH) and the build number
//@SuppressWarnings("GrMethodMayBeStatic")
String versionTag() {
    // def matcher = /^([0-9]+\.[0-9]+\.[0-9]+).*$/
    // def match = ("${grgit.describe()}" =~ matcher)[0]

    // //noinspection GroovyAssignabilityCheck
    // def result = match[1]
    // result += '-'
    // result += project.ext.buildNumber

    // println("Version: " + result)
    result = 'test'
    return result
}
